/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query GetYears {\n    years: year(order_by: { value: desc }) {\n      value\n      current\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { current: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n": types.GetYearsDocument,
    "\n  fragment CourseRow on course {\n    id\n    name\n    shortName: name_short\n    visible\n    program {\n      degree {\n        id\n        name\n        shortName: name_short\n        visible\n      }\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    track {\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semester\n    hoursPerGroup: hours_effective\n    numberOfGroups: groups_effective\n    totalHours: total_hours_effective\n    totalAssigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPriority: requests_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { is_priority: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: teacher {\n      uid\n      firstname\n      lastname\n      alias\n    }\n    requests(order_by: [{ type: asc }, { course_id: asc }]) {\n      courseId: course_id\n      type\n      hours\n    }\n  }\n": types.CourseRowFragmentDoc,
    "\n  fragment TeacherRow on service {\n    teacher {\n      uid\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalAssigned: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    message\n  }\n": types.TeacherRowFragmentDoc,
    "\n  fragment PriorityChipData on priority {\n    service {\n      teacher {\n        firstname\n        lastname\n        alias\n      }\n    }\n    seniority\n    isPriority: is_priority\n  }\n": types.PriorityChipDataFragmentDoc,
    "\n  fragment RequestCardData on request {\n    id\n    service {\n      id\n      teacher {\n        uid\n        firstname\n        lastname\n        alias\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hours_effective\n    }\n    type\n    hours\n    isPriority: is_priority\n  }\n": types.RequestCardDataFragmentDoc,
    "\n  fragment RequestFormData on course {\n    courseId: id\n    hoursPerGroup: hours_effective\n  }\n": types.RequestFormDataFragmentDoc,
    "\n  query GetActiveTeachers {\n    teachers: teacher(\n      where: { active: { _eq: true } }\n      order_by: [{ lastname: asc }, { firstname: asc }]\n    ) {\n      uid\n      firstname\n      lastname\n      alias\n    }\n  }\n": types.GetActiveTeachersDocument,
    "\n  fragment CourseArchives on course {\n    parent {\n      year\n      requests(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { teacher: { lastname: asc } } }\n          { service: { teacher: { firstname: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year\n        requests(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { teacher: { lastname: asc } } }\n            { service: { teacher: { firstname: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year\n          requests(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { teacher: { lastname: asc } } }\n              { service: { teacher: { firstname: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n": types.CourseArchivesFragmentDoc,
    "\n  fragment CourseCoordinators on course {\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      username: teacher {\n        firstname\n        lastname\n        alias\n      }\n      comment\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n  }\n": types.CourseCoordinatorsFragmentDoc,
    "\n  fragment CourseDescriptionData on course {\n    courseId: id\n    description\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      uid\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_course_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n": types.CourseDescriptionDataFragmentDoc,
    "\n  fragment CourseExpansion on course {\n    name\n    courseType: typeByType {\n      label\n    }\n    semester\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n  }\n": types.CourseExpansionFragmentDoc,
    "\n  fragment CoursePriorities on course {\n    priorities(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n": types.CoursePrioritiesFragmentDoc,
    "\n  fragment CourseRequests on course {\n    ...RequestFormData\n    requests(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n": types.CourseRequestsFragmentDoc,
    "\n  fragment CourseDetails on course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n": types.CourseDetailsFragmentDoc,
    "\n  mutation SetCurrentYear($value: Int!) {\n    years: update_year(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_year_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n": types.SetCurrentYearDocument,
    "\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n": types.TeacherMessageFragmentDoc,
    "\n  fragment TeacherNoService on teacher {\n    baseServiceHours: base_service_hours\n    positionByPosition {\n      baseServiceHours: base_service_hours\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n    ) {\n      id\n    }\n  }\n": types.TeacherNoServiceFragmentDoc,
    "\n  fragment TeacherPriorities on service {\n    priorities(\n      order_by: [\n        { course: { semester: asc } }\n        { course: { typeByType: { label: asc } } }\n        { course: { program_id: asc } }\n        { course: { track_id: asc } }\n        { course: { name: asc } }\n      ]\n    ) {\n      id\n      course {\n        name\n        shortName: name_short\n        semester\n        typeByType {\n          label\n        }\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      seniority\n      isPriority: is_priority\n    }\n  }\n": types.TeacherPrioritiesFragmentDoc,
    "\n  fragment TeacherRequests on service {\n    assigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    primary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    secondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n  }\n": types.TeacherRequestsFragmentDoc,
    "\n  fragment TeacherResponsibilities on teacher {\n    responsibilities(\n      order_by: [{ program_id: asc }, { track_id: asc }, { course_id: asc }]\n    ) {\n      id\n      program {\n        id\n        name\n        shortName: name_short\n        degree {\n          name\n          shortName: name_short\n        }\n      }\n      track {\n        id\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n      }\n      course {\n        id\n        year\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n": types.TeacherResponsibilitiesFragmentDoc,
    "\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n": types.TeacherServiceFragmentDoc,
    "\n  query GetModificationTypes {\n    modificationTypes: service_modification_type(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    modifications(order_by: [{ typeByType: { label: asc } }, { hours: asc }]) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n      on_conflict: { constraint: service_year_uid_key, update_columns: [hours] }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_service_modification_one(\n      object: { service_id: $serviceId, type: $modificationType, hours: $hours }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_service_modification_by_pk(id: $id) {\n      id\n    }\n  }\n": types.GetModificationTypesDocument,
    "\n  fragment TeacherTitle on teacher {\n    firstname\n    lastname\n    alias\n    positionByPosition {\n      label\n    }\n  }\n": types.TeacherTitleFragmentDoc,
    "\n  query GetUserProfile($uid: String!) {\n    profile: teacher_by_pk(uid: $uid) {\n      uid\n      firstname\n      lastname\n      alias\n      active\n    }\n  }\n": types.GetUserProfileDocument,
    "\n  query GetAssignments($year: Int!, $where: request_bool_exp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: \"attribution\" } }\n          $where\n        ]\n      }\n      order_by: [\n        { course: { program: { degree: { name: asc } } } }\n        { course: { program: { name: asc } } }\n        { course: { track: { name: asc } } }\n        { course: { semester: asc } }\n        { course: { name: asc } }\n        { course: { typeByType: { label: asc } } }\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      course {\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n        semester\n        typeByType {\n          label\n        }\n      }\n      service {\n        teacher {\n          uid\n          firstname\n          lastname\n          alias\n        }\n      }\n    }\n  }\n": types.GetAssignmentsDocument,
    "\n  mutation DummyMutation {\n    requests: insert_request(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DummyMutationDocument,
    "\n  query GetServiceByCourseId($uid: String!, $courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      year\n      yearByYear {\n        services(\n          where: { teacher: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_request_one(\n      object: {\n        service_id: $serviceId\n        course_id: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      on_conflict: {\n        constraint: request_service_id_course_id_type_key\n        update_columns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_request_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n": types.GetServiceByCourseIdDocument,
    "\n  query GetService($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n      }\n    }\n  }\n": types.GetServiceDocument,
    "\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hours_effective: { _gt: 0 } }\n          { groups_effective: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { program: { degree: { name: asc } } }\n        { program: { name: asc } }\n        { track: { name: asc } }\n        { semester: asc }\n        { name: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: teacher_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ year: { _eq: $year } }, { teacher: $where }] }\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ year: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n": types.GetCourseRowsDocument,
    "\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsibilities_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n": types.GetTeacherDetailsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetYears {\n    years: year(order_by: { value: desc }) {\n      value\n      current\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { current: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n"): (typeof documents)["\n  query GetYears {\n    years: year(order_by: { value: desc }) {\n      value\n      current\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { current: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRow on course {\n    id\n    name\n    shortName: name_short\n    visible\n    program {\n      degree {\n        id\n        name\n        shortName: name_short\n        visible\n      }\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    track {\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semester\n    hoursPerGroup: hours_effective\n    numberOfGroups: groups_effective\n    totalHours: total_hours_effective\n    totalAssigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPriority: requests_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { is_priority: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: teacher {\n      uid\n      firstname\n      lastname\n      alias\n    }\n    requests(order_by: [{ type: asc }, { course_id: asc }]) {\n      courseId: course_id\n      type\n      hours\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRow on course {\n    id\n    name\n    shortName: name_short\n    visible\n    program {\n      degree {\n        id\n        name\n        shortName: name_short\n        visible\n      }\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    track {\n      id\n      name\n      shortName: name_short\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semester\n    hoursPerGroup: hours_effective\n    numberOfGroups: groups_effective\n    totalHours: total_hours_effective\n    totalAssigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalPriority: requests_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { is_priority: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: teacher {\n      uid\n      firstname\n      lastname\n      alias\n    }\n    requests(order_by: [{ type: asc }, { course_id: asc }]) {\n      courseId: course_id\n      type\n      hours\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherRow on service {\n    teacher {\n      uid\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalAssigned: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    message\n  }\n"): (typeof documents)["\n  fragment TeacherRow on service {\n    teacher {\n      uid\n      firstname\n      lastname\n      alias\n      visible\n    }\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    totalAssigned: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalPrimary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    totalSecondary: requests_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    message\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PriorityChipData on priority {\n    service {\n      teacher {\n        firstname\n        lastname\n        alias\n      }\n    }\n    seniority\n    isPriority: is_priority\n  }\n"): (typeof documents)["\n  fragment PriorityChipData on priority {\n    service {\n      teacher {\n        firstname\n        lastname\n        alias\n      }\n    }\n    seniority\n    isPriority: is_priority\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestCardData on request {\n    id\n    service {\n      id\n      teacher {\n        uid\n        firstname\n        lastname\n        alias\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hours_effective\n    }\n    type\n    hours\n    isPriority: is_priority\n  }\n"): (typeof documents)["\n  fragment RequestCardData on request {\n    id\n    service {\n      id\n      teacher {\n        uid\n        firstname\n        lastname\n        alias\n      }\n    }\n    course {\n      id\n      hoursPerGroup: hours_effective\n    }\n    type\n    hours\n    isPriority: is_priority\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestFormData on course {\n    courseId: id\n    hoursPerGroup: hours_effective\n  }\n"): (typeof documents)["\n  fragment RequestFormData on course {\n    courseId: id\n    hoursPerGroup: hours_effective\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveTeachers {\n    teachers: teacher(\n      where: { active: { _eq: true } }\n      order_by: [{ lastname: asc }, { firstname: asc }]\n    ) {\n      uid\n      firstname\n      lastname\n      alias\n    }\n  }\n"): (typeof documents)["\n  query GetActiveTeachers {\n    teachers: teacher(\n      where: { active: { _eq: true } }\n      order_by: [{ lastname: asc }, { firstname: asc }]\n    ) {\n      uid\n      firstname\n      lastname\n      alias\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseArchives on course {\n    parent {\n      year\n      requests(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { teacher: { lastname: asc } } }\n          { service: { teacher: { firstname: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year\n        requests(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { teacher: { lastname: asc } } }\n            { service: { teacher: { firstname: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year\n          requests(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { teacher: { lastname: asc } } }\n              { service: { teacher: { firstname: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseArchives on course {\n    parent {\n      year\n      requests(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { teacher: { lastname: asc } } }\n          { service: { teacher: { firstname: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year\n        requests(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { teacher: { lastname: asc } } }\n            { service: { teacher: { firstname: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year\n          requests(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { teacher: { lastname: asc } } }\n              { service: { teacher: { firstname: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseCoordinators on course {\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      username: teacher {\n        firstname\n        lastname\n        alias\n      }\n      comment\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseCoordinators on course {\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      username: teacher {\n        firstname\n        lastname\n        alias\n      }\n      comment\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        username: teacher {\n          firstname\n          lastname\n          alias\n        }\n        comment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDescriptionData on course {\n    courseId: id\n    description\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      uid\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_course_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment CourseDescriptionData on course {\n    courseId: id\n    description\n    coordinators(\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      uid\n    }\n    program {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track {\n      coordinators(\n        order_by: [\n          { teacher: { lastname: asc } }\n          { teacher: { firstname: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_course_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseExpansion on course {\n    name\n    courseType: typeByType {\n      label\n    }\n    semester\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment CourseExpansion on course {\n    name\n    courseType: typeByType {\n      label\n    }\n    semester\n    program {\n      degree {\n        name\n      }\n      name\n    }\n    track {\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CoursePriorities on course {\n    priorities(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n"): (typeof documents)["\n  fragment CoursePriorities on course {\n    priorities(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRequests on course {\n    ...RequestFormData\n    requests(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRequests on course {\n    ...RequestFormData\n    requests(\n      order_by: [\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDetails on course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n"): (typeof documents)["\n  fragment CourseDetails on course {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCurrentYear($value: Int!) {\n    years: update_year(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_year_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n"): (typeof documents)["\n  mutation SetCurrentYear($value: Int!) {\n    years: update_year(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_year_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { current: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { current: true }\n    ) {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherNoService on teacher {\n    baseServiceHours: base_service_hours\n    positionByPosition {\n      baseServiceHours: base_service_hours\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherNoService on teacher {\n    baseServiceHours: base_service_hours\n    positionByPosition {\n      baseServiceHours: base_service_hours\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherPriorities on service {\n    priorities(\n      order_by: [\n        { course: { semester: asc } }\n        { course: { typeByType: { label: asc } } }\n        { course: { program_id: asc } }\n        { course: { track_id: asc } }\n        { course: { name: asc } }\n      ]\n    ) {\n      id\n      course {\n        name\n        shortName: name_short\n        semester\n        typeByType {\n          label\n        }\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      seniority\n      isPriority: is_priority\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherPriorities on service {\n    priorities(\n      order_by: [\n        { course: { semester: asc } }\n        { course: { typeByType: { label: asc } } }\n        { course: { program_id: asc } }\n        { course: { track_id: asc } }\n        { course: { name: asc } }\n      ]\n    ) {\n      id\n      course {\n        name\n        shortName: name_short\n        semester\n        typeByType {\n          label\n        }\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      seniority\n      isPriority: is_priority\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherRequests on service {\n    assigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    primary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    secondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherRequests on service {\n    assigned: requests_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    primary: requests_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n    secondary: requests_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: hours_weighted\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherResponsibilities on teacher {\n    responsibilities(\n      order_by: [{ program_id: asc }, { track_id: asc }, { course_id: asc }]\n    ) {\n      id\n      program {\n        id\n        name\n        shortName: name_short\n        degree {\n          name\n          shortName: name_short\n        }\n      }\n      track {\n        id\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n      }\n      course {\n        id\n        year\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherResponsibilities on teacher {\n    responsibilities(\n      order_by: [{ program_id: asc }, { track_id: asc }, { course_id: asc }]\n    ) {\n      id\n      program {\n        id\n        name\n        shortName: name_short\n        degree {\n          name\n          shortName: name_short\n        }\n      }\n      track {\n        id\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n      }\n      course {\n        id\n        year\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n      }\n      comment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n"): (typeof documents)["\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModificationTypes {\n    modificationTypes: service_modification_type(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    modifications(order_by: [{ typeByType: { label: asc } }, { hours: asc }]) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n      on_conflict: { constraint: service_year_uid_key, update_columns: [hours] }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_service_modification_one(\n      object: { service_id: $serviceId, type: $modificationType, hours: $hours }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_service_modification_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query GetModificationTypes {\n    modificationTypes: service_modification_type(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year\n    hours\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours\n        }\n      }\n    }\n    modifications(order_by: [{ typeByType: { label: asc } }, { hours: asc }]) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { year: $year, uid: $uid, hours: $hours }\n      on_conflict: { constraint: service_year_uid_key, update_columns: [hours] }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_service_modification_one(\n      object: { service_id: $serviceId, type: $modificationType, hours: $hours }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_service_modification_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherTitle on teacher {\n    firstname\n    lastname\n    alias\n    positionByPosition {\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherTitle on teacher {\n    firstname\n    lastname\n    alias\n    positionByPosition {\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserProfile($uid: String!) {\n    profile: teacher_by_pk(uid: $uid) {\n      uid\n      firstname\n      lastname\n      alias\n      active\n    }\n  }\n"): (typeof documents)["\n  query GetUserProfile($uid: String!) {\n    profile: teacher_by_pk(uid: $uid) {\n      uid\n      firstname\n      lastname\n      alias\n      active\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAssignments($year: Int!, $where: request_bool_exp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: \"attribution\" } }\n          $where\n        ]\n      }\n      order_by: [\n        { course: { program: { degree: { name: asc } } } }\n        { course: { program: { name: asc } } }\n        { course: { track: { name: asc } } }\n        { course: { semester: asc } }\n        { course: { name: asc } }\n        { course: { typeByType: { label: asc } } }\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      course {\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n        semester\n        typeByType {\n          label\n        }\n      }\n      service {\n        teacher {\n          uid\n          firstname\n          lastname\n          alias\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAssignments($year: Int!, $where: request_bool_exp = {}) {\n    assignments: request(\n      where: {\n        _and: [\n          { service: { year: { _eq: $year } } }\n          { type: { _eq: \"attribution\" } }\n          $where\n        ]\n      }\n      order_by: [\n        { course: { program: { degree: { name: asc } } } }\n        { course: { program: { name: asc } } }\n        { course: { track: { name: asc } } }\n        { course: { semester: asc } }\n        { course: { name: asc } }\n        { course: { typeByType: { label: asc } } }\n        { service: { teacher: { lastname: asc } } }\n        { service: { teacher: { firstname: asc } } }\n      ]\n    ) {\n      course {\n        name\n        shortName: name_short\n        program {\n          name\n          shortName: name_short\n          degree {\n            name\n            shortName: name_short\n          }\n        }\n        track {\n          name\n          shortName: name_short\n          program {\n            name\n            shortName: name_short\n            degree {\n              name\n              shortName: name_short\n            }\n          }\n        }\n        semester\n        typeByType {\n          label\n        }\n      }\n      service {\n        teacher {\n          uid\n          firstname\n          lastname\n          alias\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DummyMutation {\n    requests: insert_request(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DummyMutation {\n    requests: insert_request(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetServiceByCourseId($uid: String!, $courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      year\n      yearByYear {\n        services(\n          where: { teacher: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_request_one(\n      object: {\n        service_id: $serviceId\n        course_id: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      on_conflict: {\n        constraint: request_service_id_course_id_type_key\n        update_columns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_request_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n"): (typeof documents)["\n  query GetServiceByCourseId($uid: String!, $courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      year\n      yearByYear {\n        services(\n          where: { teacher: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_request_one(\n      object: {\n        service_id: $serviceId\n        course_id: $courseId\n        type: $requestType\n        hours: $hours\n      }\n      on_conflict: {\n        constraint: request_service_id_course_id_type_key\n        update_columns: [hours]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_request(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { course_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_request_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetService($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetService($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hours_effective: { _gt: 0 } }\n          { groups_effective: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { program: { degree: { name: asc } } }\n        { program: { name: asc } }\n        { track: { name: asc } }\n        { semester: asc }\n        { name: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: teacher_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ year: { _eq: $year } }, { teacher: $where }] }\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ year: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n"): (typeof documents)["\n  query GetCourseRows($year: Int!) {\n    courses: course(\n      where: {\n        _and: [\n          { year: { _eq: $year } }\n          { hours_effective: { _gt: 0 } }\n          { groups_effective: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { program: { degree: { name: asc } } }\n        { program: { name: asc } }\n        { track: { name: asc } }\n        { semester: asc }\n        { name: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: teacher_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ year: { _eq: $year } }, { teacher: $where }] }\n      order_by: [\n        { teacher: { lastname: asc } }\n        { teacher: { firstname: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: course_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ year: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsibilities_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: teacher_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsibilities_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { year: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;