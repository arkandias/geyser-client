/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query GetYears {\n    years: annee(order_by: { value: desc }) {\n      value\n      current: en_cours\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { en_cours: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n\n  query GetUserProfile($uid: String!) {\n    profile: intervenant_by_pk(uid: $uid) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      active: actif\n    }\n  }\n": types.GetYearsDocument,
    "\n  fragment CourseRow on enseignement {\n    id\n    name: nom\n    shortName: nom_court\n    visible\n    program: mention {\n      degree: cursus {\n        id\n        name: nom\n        shortName: nom_court\n        visible\n      }\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    track: parcours {\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semestre\n    hoursPerGroup: heures_corrigees\n    numberOfGroups: groupes_corriges\n    totalHours: total_heures_corrigees\n    totalAssigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPriority: demandes_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { prioritaire: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n    requests: demandes(order_by: [{ type: asc }, { ens_id: asc }]) {\n      courseId: ens_id\n      type\n      hours: heures\n    }\n  }\n": types.CourseRowFragmentDoc,
    "\n  fragment TeacherRow on service {\n    teacher: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      visible\n    }\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    totalAssigned: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    message\n  }\n": types.TeacherRowFragmentDoc,
    "\n  fragment PriorityChipData on priorite {\n    service {\n      teacher: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    seniority: anciennete\n    isPriority: prioritaire\n  }\n": types.PriorityChipDataFragmentDoc,
    "\n  fragment RequestCardData on demande {\n    id\n    service {\n      id\n      teacher: intervenant {\n        uid\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    course: enseignement {\n      id\n      hoursPerGroup: heures_corrigees\n    }\n    type\n    hours: heures\n    isPriority: prioritaire\n  }\n": types.RequestCardDataFragmentDoc,
    "\n  fragment RequestFormData on enseignement {\n    courseId: id\n    hoursPerGroup: heures_corrigees\n  }\n": types.RequestFormDataFragmentDoc,
    "\n  fragment CourseArchives on enseignement {\n    parent {\n      year: annee\n      requests: demandes(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { intervenant: { nom: asc } } }\n          { service: { intervenant: { prenom: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year: annee\n        requests: demandes(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { intervenant: { nom: asc } } }\n            { service: { intervenant: { prenom: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year: annee\n          requests: demandes(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { intervenant: { nom: asc } } }\n              { service: { intervenant: { prenom: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n": types.CourseArchivesFragmentDoc,
    "\n  fragment CourseCoordinators on enseignement {\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      username: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n      comment: commentaire\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n  }\n": types.CourseCoordinatorsFragmentDoc,
    "\n  fragment CourseDescriptionData on enseignement {\n    courseId: id\n    description\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      uid\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_enseignement_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n": types.CourseDescriptionDataFragmentDoc,
    "\n  fragment CourseExpansion on enseignement {\n    name: nom\n    courseType: typeByType {\n      label\n    }\n    semester: semestre\n    program: mention {\n      degree: cursus {\n        name: nom\n      }\n      name: nom\n    }\n    track: parcours {\n      name: nom\n    }\n  }\n": types.CourseExpansionFragmentDoc,
    "\n  fragment CoursePriorities on enseignement {\n    priorities: priorites(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n": types.CoursePrioritiesFragmentDoc,
    "\n  fragment CourseRequests on enseignement {\n    ...RequestFormData\n    requests: demandes(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n": types.CourseRequestsFragmentDoc,
    "\n  fragment CourseDetails on enseignement {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n": types.CourseDetailsFragmentDoc,
    "\n  mutation SetCurrentYear($value: Int!) {\n    years: update_annee(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_annee_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n": types.SetCurrentYearDocument,
    "\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n": types.TeacherMessageFragmentDoc,
    "\n  fragment TeacherNoService on intervenant {\n    position: fonctionByFonction {\n      baseServiceHours: heures_eqtd_service_base\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n    ) {\n      id\n    }\n  }\n": types.TeacherNoServiceFragmentDoc,
    "\n  fragment TeacherPriorities on service {\n    priorities: priorites(\n      order_by: [\n        { enseignement: { semestre: asc } }\n        { enseignement: { typeByType: { label: asc } } }\n        { enseignement: { mention_id: asc } }\n        { enseignement: { parcours_id: asc } }\n        { enseignement: { nom: asc } }\n      ]\n    ) {\n      id\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        semester: semestre\n        typeByType {\n          label\n        }\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      seniority: anciennete\n      isPriority: prioritaire\n    }\n  }\n": types.TeacherPrioritiesFragmentDoc,
    "\n  fragment TeacherRequests on service {\n    assigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    primary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    secondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n  }\n": types.TeacherRequestsFragmentDoc,
    "\n  fragment TeacherResponsibilities on intervenant {\n    responsibilities: responsabilites(\n      order_by: [{ mention_id: asc }, { parcours_id: asc }, { ens_id: asc }]\n    ) {\n      id\n      program: mention {\n        name: nom\n        shortName: nom_court\n        degree: cursus {\n          name: nom\n          shortName: nom_court\n        }\n      }\n      track: parcours {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n      }\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      comment: commentaire\n    }\n  }\n": types.TeacherResponsibilitiesFragmentDoc,
    "\n  query GetActiveTeachers {\n    teachers: intervenant(\n      where: { actif: { _eq: true } }\n      order_by: [{ nom: asc }, { prenom: asc }]\n    ) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n  }\n": types.GetActiveTeachersDocument,
    "\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n": types.TeacherServiceFragmentDoc,
    "\n  query GetModificationTypes {\n    modificationTypes: type_modification_service(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year: annee\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    modifications(\n      order_by: [{ typeByType: { label: asc } }, { heures_eqtd: asc }]\n    ) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours: heures_eqtd\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n      on_conflict: {\n        constraint: service_annee_uid_key\n        update_columns: [heures_eqtd]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_modification_service_one(\n      object: {\n        service_id: $serviceId\n        type: $modificationType\n        heures_eqtd: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_modification_service_by_pk(id: $id) {\n      id\n    }\n  }\n": types.GetModificationTypesDocument,
    "\n  fragment TeacherTitle on intervenant {\n    firstname: prenom\n    lastname: nom\n    alias\n    position: fonctionByFonction {\n      label\n    }\n  }\n": types.TeacherTitleFragmentDoc,
    "\n  mutation DummyMutation {\n    requests: insert_demande(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n": types.DummyMutationDocument,
    "\n  query GetService($uid: String!, $courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      year: annee\n      yearByYear: anneeByAnnee {\n        services(\n          where: { intervenant: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours: heures\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_demande_one(\n      object: {\n        service_id: $serviceId\n        ens_id: $courseId\n        type: $requestType\n        heures: $hours\n      }\n      on_conflict: {\n        constraint: demande_service_id_ens_id_type_key\n        update_columns: [heures]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_demande_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n": types.GetServiceDocument,
    "\n  query GetCourseRows($year: Int!) {\n    courses: enseignement(\n      where: {\n        _and: [\n          { annee: { _eq: $year } }\n          { heures_corrigees: { _gt: 0 } }\n          { groupes_corriges: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { mention: { cursus: { nom: asc } } }\n        { mention: { nom: asc } }\n        { parcours: { nom: asc } }\n        { semestre: asc }\n        { nom: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: intervenant_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ annee: { _eq: $year } }, { intervenant: $where }] }\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ annee: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n": types.GetCourseRowsDocument,
    "\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: intervenant_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsabilites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { annee: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n": types.GetTeacherDetailsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetYears {\n    years: annee(order_by: { value: desc }) {\n      value\n      current: en_cours\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { en_cours: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n\n  query GetUserProfile($uid: String!) {\n    profile: intervenant_by_pk(uid: $uid) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      active: actif\n    }\n  }\n"): (typeof documents)["\n  query GetYears {\n    years: annee(order_by: { value: desc }) {\n      value\n      current: en_cours\n      visible\n    }\n  }\n\n  query GetCurrentPhase {\n    phases: phase(\n      where: { en_cours: { _eq: true } }\n      limit: 1 # unique\n    ) {\n      value\n    }\n  }\n\n  query GetUserProfile($uid: String!) {\n    profile: intervenant_by_pk(uid: $uid) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      active: actif\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRow on enseignement {\n    id\n    name: nom\n    shortName: nom_court\n    visible\n    program: mention {\n      degree: cursus {\n        id\n        name: nom\n        shortName: nom_court\n        visible\n      }\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    track: parcours {\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semestre\n    hoursPerGroup: heures_corrigees\n    numberOfGroups: groupes_corriges\n    totalHours: total_heures_corrigees\n    totalAssigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPriority: demandes_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { prioritaire: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n    requests: demandes(order_by: [{ type: asc }, { ens_id: asc }]) {\n      courseId: ens_id\n      type\n      hours: heures\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRow on enseignement {\n    id\n    name: nom\n    shortName: nom_court\n    visible\n    program: mention {\n      degree: cursus {\n        id\n        name: nom\n        shortName: nom_court\n        visible\n      }\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    track: parcours {\n      id\n      name: nom\n      shortName: nom_court\n      visible\n    }\n    courseType: typeByType {\n      value\n      label\n    }\n    semester: semestre\n    hoursPerGroup: heures_corrigees\n    numberOfGroups: groupes_corriges\n    totalHours: total_heures_corrigees\n    totalAssigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n    totalPriority: demandes_aggregate(\n      where: {\n        _and: [{ type: { _eq: \"principale\" } }, { prioritaire: { _eq: true } }]\n      }\n    ) {\n      aggregate {\n        sum {\n          hours: heures\n        }\n      }\n    }\n  }\n\n  fragment TeacherCourses on service {\n    name: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n    requests: demandes(order_by: [{ type: asc }, { ens_id: asc }]) {\n      courseId: ens_id\n      type\n      hours: heures\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherRow on service {\n    teacher: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      visible\n    }\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    totalAssigned: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    message\n  }\n"): (typeof documents)["\n  fragment TeacherRow on service {\n    teacher: intervenant {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n      visible\n    }\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    totalAssigned: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"attribution\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalPrimary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"principale\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    totalSecondary: demandes_aggregate(\n      where: { _and: [{ type: { _eq: \"secondaire\" } }] }\n    ) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    message\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PriorityChipData on priorite {\n    service {\n      teacher: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    seniority: anciennete\n    isPriority: prioritaire\n  }\n"): (typeof documents)["\n  fragment PriorityChipData on priorite {\n    service {\n      teacher: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    seniority: anciennete\n    isPriority: prioritaire\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestCardData on demande {\n    id\n    service {\n      id\n      teacher: intervenant {\n        uid\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    course: enseignement {\n      id\n      hoursPerGroup: heures_corrigees\n    }\n    type\n    hours: heures\n    isPriority: prioritaire\n  }\n"): (typeof documents)["\n  fragment RequestCardData on demande {\n    id\n    service {\n      id\n      teacher: intervenant {\n        uid\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n    }\n    course: enseignement {\n      id\n      hoursPerGroup: heures_corrigees\n    }\n    type\n    hours: heures\n    isPriority: prioritaire\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RequestFormData on enseignement {\n    courseId: id\n    hoursPerGroup: heures_corrigees\n  }\n"): (typeof documents)["\n  fragment RequestFormData on enseignement {\n    courseId: id\n    hoursPerGroup: heures_corrigees\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseArchives on enseignement {\n    parent {\n      year: annee\n      requests: demandes(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { intervenant: { nom: asc } } }\n          { service: { intervenant: { prenom: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year: annee\n        requests: demandes(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { intervenant: { nom: asc } } }\n            { service: { intervenant: { prenom: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year: annee\n          requests: demandes(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { intervenant: { nom: asc } } }\n              { service: { intervenant: { prenom: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseArchives on enseignement {\n    parent {\n      year: annee\n      requests: demandes(\n        where: { type: { _eq: \"attribution\" } }\n        order_by: [\n          { service: { intervenant: { nom: asc } } }\n          { service: { intervenant: { prenom: asc } } }\n        ]\n      ) {\n        id\n        ...RequestCardData\n      }\n      parent {\n        year: annee\n        requests: demandes(\n          where: { type: { _eq: \"attribution\" } }\n          order_by: [\n            { service: { intervenant: { nom: asc } } }\n            { service: { intervenant: { prenom: asc } } }\n          ]\n        ) {\n          id\n          ...RequestCardData\n        }\n        parent {\n          year: annee\n          requests: demandes(\n            where: { type: { _eq: \"attribution\" } }\n            order_by: [\n              { service: { intervenant: { nom: asc } } }\n              { service: { intervenant: { prenom: asc } } }\n            ]\n          ) {\n            id\n            ...RequestCardData\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseCoordinators on enseignement {\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      username: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n      comment: commentaire\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CourseCoordinators on enseignement {\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      username: intervenant {\n        firstname: prenom\n        lastname: nom\n        alias\n      }\n      comment: commentaire\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        username: intervenant {\n          firstname: prenom\n          lastname: nom\n          alias\n        }\n        comment: commentaire\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDescriptionData on enseignement {\n    courseId: id\n    description\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      uid\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_enseignement_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment CourseDescriptionData on enseignement {\n    courseId: id\n    description\n    coordinators: responsables(\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      uid\n    }\n    program: mention {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n    track: parcours {\n      coordinators: responsables(\n        order_by: [\n          { intervenant: { nom: asc } }\n          { intervenant: { prenom: asc } }\n        ]\n      ) {\n        uid\n      }\n    }\n  }\n\n  mutation UpdateDescription($courseId: Int!, $description: String) {\n    course: update_enseignement_by_pk(\n      pk_columns: { id: $courseId }\n      _set: { description: $description }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseExpansion on enseignement {\n    name: nom\n    courseType: typeByType {\n      label\n    }\n    semester: semestre\n    program: mention {\n      degree: cursus {\n        name: nom\n      }\n      name: nom\n    }\n    track: parcours {\n      name: nom\n    }\n  }\n"): (typeof documents)["\n  fragment CourseExpansion on enseignement {\n    name: nom\n    courseType: typeByType {\n      label\n    }\n    semester: semestre\n    program: mention {\n      degree: cursus {\n        name: nom\n      }\n      name: nom\n    }\n    track: parcours {\n      name: nom\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CoursePriorities on enseignement {\n    priorities: priorites(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n"): (typeof documents)["\n  fragment CoursePriorities on enseignement {\n    priorities: priorites(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      ...PriorityChipData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseRequests on enseignement {\n    ...RequestFormData\n    requests: demandes(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"): (typeof documents)["\n  fragment CourseRequests on enseignement {\n    ...RequestFormData\n    requests: demandes(\n      order_by: [\n        { service: { intervenant: { nom: asc } } }\n        { service: { intervenant: { prenom: asc } } }\n      ]\n    ) {\n      id\n      type\n      ...RequestCardData\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CourseDetails on enseignement {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n"): (typeof documents)["\n  fragment CourseDetails on enseignement {\n    courseId: id\n    ...CourseExpansion\n    ...CourseCoordinators\n    ...CourseDescriptionData\n    ...CourseRequests\n    ...CoursePriorities\n    ...CourseArchives\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetCurrentYear($value: Int!) {\n    years: update_annee(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_annee_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n"): (typeof documents)["\n  mutation SetCurrentYear($value: Int!) {\n    years: update_annee(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    current: update_annee_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n\n  mutation SetCurrentPhase($value: String!) {\n    phases: update_phase(\n      where: { value: { _neq: $value } }\n      _set: { en_cours: null }\n    ) {\n      returning {\n        value\n      }\n    }\n    enCours: update_phase_by_pk(\n      pk_columns: { value: $value }\n      _set: { en_cours: true }\n    ) {\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherMessage on service {\n    id\n    uid\n    message\n  }\n\n  mutation UpdateMessage($serviceId: Int!, $message: String) {\n    service: update_service_by_pk(\n      pk_columns: { id: $serviceId }\n      _set: { message: $message }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherNoService on intervenant {\n    position: fonctionByFonction {\n      baseServiceHours: heures_eqtd_service_base\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n    ) {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherNoService on intervenant {\n    position: fonctionByFonction {\n      baseServiceHours: heures_eqtd_service_base\n    }\n  }\n\n  mutation InsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n    ) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherPriorities on service {\n    priorities: priorites(\n      order_by: [\n        { enseignement: { semestre: asc } }\n        { enseignement: { typeByType: { label: asc } } }\n        { enseignement: { mention_id: asc } }\n        { enseignement: { parcours_id: asc } }\n        { enseignement: { nom: asc } }\n      ]\n    ) {\n      id\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        semester: semestre\n        typeByType {\n          label\n        }\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      seniority: anciennete\n      isPriority: prioritaire\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherPriorities on service {\n    priorities: priorites(\n      order_by: [\n        { enseignement: { semestre: asc } }\n        { enseignement: { typeByType: { label: asc } } }\n        { enseignement: { mention_id: asc } }\n        { enseignement: { parcours_id: asc } }\n        { enseignement: { nom: asc } }\n      ]\n    ) {\n      id\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        semester: semestre\n        typeByType {\n          label\n        }\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      seniority: anciennete\n      isPriority: prioritaire\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherRequests on service {\n    assigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    primary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    secondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherRequests on service {\n    assigned: demandes_aggregate(where: { type: { _eq: \"attribution\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    primary: demandes_aggregate(where: { type: { _eq: \"principale\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n    secondary: demandes_aggregate(where: { type: { _eq: \"secondaire\" } }) {\n      aggregate {\n        sum {\n          weightedHours: heures_eqtd\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherResponsibilities on intervenant {\n    responsibilities: responsabilites(\n      order_by: [{ mention_id: asc }, { parcours_id: asc }, { ens_id: asc }]\n    ) {\n      id\n      program: mention {\n        name: nom\n        shortName: nom_court\n        degree: cursus {\n          name: nom\n          shortName: nom_court\n        }\n      }\n      track: parcours {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n      }\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      comment: commentaire\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherResponsibilities on intervenant {\n    responsibilities: responsabilites(\n      order_by: [{ mention_id: asc }, { parcours_id: asc }, { ens_id: asc }]\n    ) {\n      id\n      program: mention {\n        name: nom\n        shortName: nom_court\n        degree: cursus {\n          name: nom\n          shortName: nom_court\n        }\n      }\n      track: parcours {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n      }\n      course: enseignement {\n        name: nom\n        shortName: nom_court\n        program: mention {\n          name: nom\n          shortName: nom_court\n          degree: cursus {\n            name: nom\n            shortName: nom_court\n          }\n        }\n        track: parcours {\n          name: nom\n          shortName: nom_court\n          program: mention {\n            name: nom\n            shortName: nom_court\n            degree: cursus {\n              name: nom\n              shortName: nom_court\n            }\n          }\n        }\n      }\n      comment: commentaire\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetActiveTeachers {\n    teachers: intervenant(\n      where: { actif: { _eq: true } }\n      order_by: [{ nom: asc }, { prenom: asc }]\n    ) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n  }\n"): (typeof documents)["\n  query GetActiveTeachers {\n    teachers: intervenant(\n      where: { actif: { _eq: true } }\n      order_by: [{ nom: asc }, { prenom: asc }]\n    ) {\n      uid\n      firstname: prenom\n      lastname: nom\n      alias\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n"): (typeof documents)["\n  fragment TeacherService on service {\n    ...TeacherServiceDetails\n    ...TeacherRequests\n    ...TeacherPriorities\n    ...TeacherMessage\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetModificationTypes {\n    modificationTypes: type_modification_service(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year: annee\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    modifications(\n      order_by: [{ typeByType: { label: asc } }, { heures_eqtd: asc }]\n    ) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours: heures_eqtd\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n      on_conflict: {\n        constraint: service_annee_uid_key\n        update_columns: [heures_eqtd]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_modification_service_one(\n      object: {\n        service_id: $serviceId\n        type: $modificationType\n        heures_eqtd: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_modification_service_by_pk(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query GetModificationTypes {\n    modificationTypes: type_modification_service(order_by: { value: asc }) {\n      value\n      label\n      description\n    }\n  }\n\n  fragment TeacherServiceDetails on service {\n    id\n    uid\n    year: annee\n    base: heures_eqtd\n    totalModifications: modifications_aggregate {\n      aggregate {\n        sum {\n          hours: heures_eqtd\n        }\n      }\n    }\n    modifications(\n      order_by: [{ typeByType: { label: asc } }, { heures_eqtd: asc }]\n    ) {\n      id\n      modificationType: typeByType {\n        label\n      }\n      hours: heures_eqtd\n    }\n  }\n\n  mutation UpsertService($year: Int!, $uid: String!, $hours: Float!) {\n    service: insert_service_one(\n      object: { annee: $year, uid: $uid, heures_eqtd: $hours }\n      on_conflict: {\n        constraint: service_annee_uid_key\n        update_columns: [heures_eqtd]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation InsertModification(\n    $serviceId: Int!\n    $modificationType: String!\n    $hours: Float!\n  ) {\n    serviceModification: insert_modification_service_one(\n      object: {\n        service_id: $serviceId\n        type: $modificationType\n        heures_eqtd: $hours\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteModification($id: Int!) {\n    serviceModification: delete_modification_service_by_pk(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TeacherTitle on intervenant {\n    firstname: prenom\n    lastname: nom\n    alias\n    position: fonctionByFonction {\n      label\n    }\n  }\n"): (typeof documents)["\n  fragment TeacherTitle on intervenant {\n    firstname: prenom\n    lastname: nom\n    alias\n    position: fonctionByFonction {\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DummyMutation {\n    requests: insert_demande(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DummyMutation {\n    requests: insert_demande(objects: []) {\n      returning {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetService($uid: String!, $courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      year: annee\n      yearByYear: anneeByAnnee {\n        services(\n          where: { intervenant: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours: heures\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_demande_one(\n      object: {\n        service_id: $serviceId\n        ens_id: $courseId\n        type: $requestType\n        heures: $hours\n      }\n      on_conflict: {\n        constraint: demande_service_id_ens_id_type_key\n        update_columns: [heures]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_demande_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n"): (typeof documents)["\n  query GetService($uid: String!, $courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      year: annee\n      yearByYear: anneeByAnnee {\n        services(\n          where: { intervenant: { uid: { _eq: $uid } } }\n          limit: 1 # unique\n        ) {\n          id\n        }\n      }\n    }\n  }\n\n  query GetRequest($serviceId: Int!, $courseId: Int!, $requestType: String!) {\n    requests: demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n      limit: 1 # unique\n    ) {\n      hours: heures\n    }\n  }\n\n  mutation UpsertRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n    $hours: Float!\n  ) {\n    request: insert_demande_one(\n      object: {\n        service_id: $serviceId\n        ens_id: $courseId\n        type: $requestType\n        heures: $hours\n      }\n      on_conflict: {\n        constraint: demande_service_id_ens_id_type_key\n        update_columns: [heures]\n      }\n    ) {\n      id\n    }\n  }\n\n  mutation DeleteRequest(\n    $serviceId: Int!\n    $courseId: Int!\n    $requestType: String!\n  ) {\n    requests: delete_demande(\n      where: {\n        _and: [\n          { service_id: { _eq: $serviceId } }\n          { ens_id: { _eq: $courseId } }\n          { type: { _eq: $requestType } }\n        ]\n      }\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n\n  mutation DeleteRequestById($id: Int!) {\n    request: delete_demande_by_pk(id: $id) {\n      id\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetCourseRows($year: Int!) {\n    courses: enseignement(\n      where: {\n        _and: [\n          { annee: { _eq: $year } }\n          { heures_corrigees: { _gt: 0 } }\n          { groupes_corriges: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { mention: { cursus: { nom: asc } } }\n        { mention: { nom: asc } }\n        { parcours: { nom: asc } }\n        { semestre: asc }\n        { nom: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: intervenant_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ annee: { _eq: $year } }, { intervenant: $where }] }\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ annee: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n"): (typeof documents)["\n  query GetCourseRows($year: Int!) {\n    courses: enseignement(\n      where: {\n        _and: [\n          { annee: { _eq: $year } }\n          { heures_corrigees: { _gt: 0 } }\n          { groupes_corriges: { _gt: 0 } }\n        ]\n      }\n      order_by: [\n        { mention: { cursus: { nom: asc } } }\n        { mention: { nom: asc } }\n        { parcours: { nom: asc } }\n        { semestre: asc }\n        { nom: asc }\n        { type: asc }\n      ]\n    ) {\n      ...CourseRow\n    }\n  }\n\n  query GetTeacherRows($year: Int!, $where: intervenant_bool_exp = {}) {\n    teachers: service(\n      where: { _and: [{ annee: { _eq: $year } }, { intervenant: $where }] }\n      order_by: [\n        { intervenant: { nom: asc } }\n        { intervenant: { prenom: asc } }\n      ]\n    ) {\n      ...TeacherRow\n    }\n  }\n\n  query GetCourseDetails($courseId: Int!) {\n    course: enseignement_by_pk(id: $courseId) {\n      ...CourseDetails\n    }\n  }\n\n  query GetTeacherCourses($year: Int!, $uid: String!) {\n    services: service(\n      where: { _and: [{ annee: { _eq: $year } }, { uid: { _eq: $uid } }] }\n      limit: 1 # unique\n    ) {\n      ...TeacherCourses\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: intervenant_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsabilites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { annee: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTeacherDetails($year: Int!, $uid: String!) {\n    teacher: intervenant_by_pk(uid: $uid) {\n      responsibilitiesAggregate: responsabilites_aggregate {\n        aggregate {\n          count\n        }\n      }\n      ...TeacherTitle\n      ...TeacherResponsibilities\n      ...TeacherNoService\n\n      services(\n        where: { annee: { _eq: $year } }\n        limit: 1 # unique\n      ) {\n        id\n        ...TeacherService\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;